package Simgate {
    params {
        n: Integer,
        m: Integer,
        p: Integer,
        encn: fn Bits(n),Bits(n),Bits(n) -> Bits(m),
        encm: fn Bits(n),Bits(m),Bits(n) -> Bits(p),
        zeron: Bits(n),
        zerom: Bits(m),
    }

    import oracles {
        GETAIN(h: Integer) -> Bits(n),
        GETINAIN(h: Integer) -> Bits(n),
        EVAL(j: Integer, l: Integer, r: Integer, op: Table((Bool, Bool), Bool)),
        GETAOUT(h: Integer) -> Bits(n),
    }


    oracle GBLG(
        l: Integer,
        r: Integer,
        op: Table((Bool, Bool), Bool),
        j: Integer
    ) -> Table(Bits(p), Bool) {
        C <- new Table(Bits(p), Bool);
        Sl <- new Table(Bool, Bits(n));
        Sr <- new Table(Bool, Bits(n));
        Sj <- new Table(Bool, Bits(n));
        _ <- invoke EVAL(j, l, r, op);
        temp <- invoke GETAIN(l);
        Sl[false] <- Some(temp);
        temp <- invoke GETINAIN(l);
        Sl[true] <- Some(temp);
        temp <- invoke GETAIN(r);
        Sr[false] <- Some(temp);
        temp <- invoke GETINAIN(r);
        Sr[true] <- Some(temp);
        temp <- invoke GETAOUT(j);
        Sj[true] <- Some(temp);
        dl <- false;
        dr <- false;
        kl <- Unwrap(Sl[dl]);
        kr <- Unwrap(Sr[dr]);
        kj <- zeron;
        if (not dl and not dr) {
            kj <- Unwrap(Sj[true]);
        }
        rin <-$ Bits(n) sample-name rin_round_0;
        rout <-$ Bits(n) sample-name rout_round_0;
        cin <- encn(kl, kj, rin);
        cout <- encm(kr, cin, rout);
        C[cout] <- Some(true);
        dl <- true;
        dr <- false;
        kl <- Unwrap(Sl[dl]);
        kr <- Unwrap(Sr[dr]);
        kj <- zeron;
        if (not dl and not dr) {
            kj <- Unwrap(Sj[true]);
        }
        rin <-$ Bits(n) sample-name rin_round_1;
        rout <-$ Bits(n) sample-name rout_round_1;
        cin <- encn(kl, kj, rin);
        cout <- encm(kr, cin, rout);
        C[cout] <- Some(true);
        dl <- false;
        dr <- true;
        kl <- Unwrap(Sl[dl]);
        kr <- Unwrap(Sr[dr]);
        kj <- zeron;
        if (not dl and not dr) {
            kj <- Unwrap(Sj[true]);
        }
        rin <-$ Bits(n) sample-name rin_round_2;
        rout <-$ Bits(n) sample-name rout_round_2;
        cin <- encn(kl, kj, rin);
        cout <- encm(kr, cin, rout);
        C[cout] <- Some(true);
        dl <- true;
        dr <- true;
        kl <- Unwrap(Sl[dl]);
        kr <- Unwrap(Sr[dr]);
        kj <- zeron;
        if (not dl and not dr) {
            kj <- Unwrap(Sj[true]);
        }
        rin <-$ Bits(n) sample-name rin_round_3;
        rout <-$ Bits(n) sample-name rout_round_3;
        cin <- encn(kl, kj, rin);
        cout <- encm(kr, cin, rout);
        C[cout] <- Some(true);
        return C;
    }
}
