
(define-fun state-equality
	((state-H4 (Array Int (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
										  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
										  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
	 (state-H5 (Array Int (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
										  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
										  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
  Bool
  (forall ((ctr Int))
		  (and (=> (= (select state-H5 ctr)
					  (as mk-none (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
												  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
												  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256))
												  Int))))
				   (= (select state-H4 ctr) (select state-H5 ctr)))
			   (=> (= (select state-H4 ctr)
					  (as mk-none (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
												  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
												  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256))
												  Int))))
				   (= (select state-H4 ctr) (select state-H5 ctr)))
			   (let ((state (select state-H4 ctr)))
				 (=> (not (= state
							 (as mk-none (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
														 (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
														 (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256))
														 Int)))))

					 (let  ((U    (el11-1  (maybe-get state)))
							(u    (el11-2  (maybe-get state)))
							(V    (el11-3  (maybe-get state)))
							(ltk  (el11-4  (maybe-get state)))
							(acc  (el11-5  (maybe-get state)))
							(k    (el11-6  (maybe-get state)))
							(ni   (el11-7  (maybe-get state)))
							(nr   (el11-8  (maybe-get state)))
							(kmac (el11-9  (maybe-get state)))
							(sid  (el11-10 (maybe-get state)))
							(mess (el11-11 (maybe-get state))))
					   (= (select state-H5 ctr)
						  (mk-some (mk-tuple11 U u V ltk acc (as mk-none (Maybe Bits_256))
											   ni nr kmac sid mess)))))))))


(define-fun invariant-H4
	((state-H4 (Array Int (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
										  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
										  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
  Bool
  (forall ((ctr Int))
		  (let ((state (select state-H4 ctr)))
			(=> (not (= state
						(as mk-none (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
													(Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
													(Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256))
													Int)))))
				(let  ((U    (el11-1  (maybe-get state)))
					   (u    (el11-2  (maybe-get state)))
					   (V    (el11-3  (maybe-get state)))
					   (ltk  (el11-4  (maybe-get state)))
					   (acc  (el11-5  (maybe-get state)))
					   (k    (el11-6  (maybe-get state)))
					   (ni   (el11-7  (maybe-get state)))
					   (nr   (el11-8  (maybe-get state)))
					   (kmac (el11-9  (maybe-get state)))
					   (sid  (el11-10 (maybe-get state)))
					   (mess (el11-11 (maybe-get state))))
				  (and
				   (=> (> 1 mess)
					   (= k (as mk-none (Maybe Bits_256))))
				   (=> u (=> (> mess 0)
							 (and (not (= ni (as mk-none (Maybe Bits_256))))
								  (not (= nr (as mk-none (Maybe Bits_256))))
								  (not (= k (as mk-none (Maybe Bits_256)))))))
				   (=> (> mess 1)
					   (and (not (= ni (as mk-none (Maybe Bits_256))))
							(not (= nr (as mk-none (Maybe Bits_256))))
							(not (= k (as mk-none (Maybe Bits_256))))))
				   (=> (= acc (mk-some true))
					   (not (= k (as mk-none (Maybe Bits_256)))))
				   (=> (not (= k (as mk-none (Maybe Bits_256))))
					   (and (= k (mk-some (<<func-prf>> ltk U V
														(maybe-get ni)
														(maybe-get nr)
														true)))))))))))

(define-fun invariant-H5
	((state-H5 (Array Int (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
										  (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
										  (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
  Bool
  (forall ((ctr Int))
		  (let ((state (select state-H5 ctr)))
			(=> (not (= state
						(as mk-none (Maybe (Tuple11 Int Bool Int Bits_256 (Maybe Bool) (Maybe Bits_256)
													(Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
													(Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256))
													Int)))))
				(let  ((U    (el11-1  (maybe-get state)))
					   (u    (el11-2  (maybe-get state)))
					   (V    (el11-3  (maybe-get state)))
					   (ltk  (el11-4  (maybe-get state)))
					   (acc  (el11-5  (maybe-get state)))
					   (k    (el11-6  (maybe-get state)))
					   (ni   (el11-7  (maybe-get state)))
					   (nr   (el11-8  (maybe-get state)))
					   (kmac (el11-9  (maybe-get state)))
					   (sid  (el11-10 (maybe-get state)))
					   (mess (el11-11 (maybe-get state))))
				  (and
				   (=> (= acc (mk-some true))
					   (and (not (= ni (as mk-none (Maybe Bits_256))))
							(not (= nr (as mk-none (Maybe Bits_256))))))))))))

(define-fun invariant
	((state-H4  <GameState_H4_<$<!n!>$>>)
	 (state-H5  <GameState_H5_<$<!n!>$>>))
  Bool
  (let ((gamestate-H4 (<game-H4-<$<!n!>$>-pkgstate-KX> state-H4))
		(gamestate-H5 (<game-H5-<$<!n!>$>-pkgstate-KX> state-H5))
		(noncestate-H4 (<game-H4-<$<!n!>$>-pkgstate-Nonces> state-H4))
		(noncestate-H5 (<game-H5-<$<!n!>$>-pkgstate-Nonces> state-H5)))
	(and (= (<pkg-state-Nonces-<$<!n!>$>-Nonces> noncestate-H4)
			(<pkg-state-Nonces-<$<!n!>$>-Nonces> noncestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-LTK> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-LTK>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-ctr_> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-ctr_>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-H> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-H>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-kid_> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-kid_>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-RevTested> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-RevTested>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-Fresh> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-Fresh>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-First> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-First>    gamestate-H5))
		 (= (<pkg-state-KX_nochecks-<$<!n!>$>-Second> gamestate-H4)
			(<pkg-state-KX_nokey-<$<!n!>$>-Second>    gamestate-H5))

		 (let ((state-H4 (<pkg-state-KX_nochecks-<$<!n!>$>-State> gamestate-H4))
			   (state-H5 (<pkg-state-KX_nokey-<$<!n!>$>-State>    gamestate-H5)))
		   (and (state-equality state-H4 state-H5)
				(invariant-H4 state-H4)
				(invariant-H5 state-H5))))))
