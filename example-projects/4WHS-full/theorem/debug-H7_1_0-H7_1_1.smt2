(define-fun <relation-lemma-false-H7_1_0-H7_1_1-Test>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (ctr Int))
  Bool
  false)

(define-fun <relation-lemma-false-H7_1_0-H7_1_1-Send3>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3>)
     (ctr Int) (msg (Tuple2 Bits_256 Bits_256)))
  Bool
  false)

(define-fun <relation-lemma-false-H7_1_0-H7_1_1-NewKey>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey>)
     (ltk (Maybe Bits_256)))
  Bool
  false)

(define-fun <relation-lemma-false-H7_1_0-H7_1_1-Reveal>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (ctr Int))
  Bool
  false)




;; For honest keys, before reveal the output key was never computed
;;
;; ie revtested = None -> no entry in the table
;;
(define-fun <relation-lemma-key-not-yet-computed-H7_1_0-H7_1_1-Reveal>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (ctr Int))
  Bool
  (let ((retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-return-value-or-abort> H710-return))
        (H710-new (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-game-state> H710-return))
        (nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> H710-old))
        (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
        (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
        (none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                          (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                          (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
    (let ((State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
          (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
          (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710)))
      (and
       (=> (not (= retval0 (as mk-abort (ReturnValue Bits_256))))
           (let ((state (select State0 ctr)))
             (and (not (= state none))
                  (let  ((U    (el11-1  (maybe-get state)))
                         (u    (el11-2  (maybe-get state)))
                         (V    (el11-3  (maybe-get state)))
                         (kid  (el11-4  (maybe-get state)))
                         (acc  (el11-5  (maybe-get state)))
                         (k    (el11-6  (maybe-get state)))
                         (ni   (el11-7  (maybe-get state)))
                         (nr   (el11-8  (maybe-get state)))
                         (kmac (el11-9  (maybe-get state)))
                         (sid  (el11-10 (maybe-get state)))
                         (mess (el11-11 (maybe-get state))))
                    (and (not (= sid (as mk-none (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))))
                         (= (select RevTested0 (maybe-get sid))
                            (as mk-none (Maybe Bool))))))))))))





(define-fun prf-table-empty
    ((state0 (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                       (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                       (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (revtesteval0 (Array (Tuple5 Int Int Int Bits_256 Bits_256) (Maybe Int)))
     (revtested0 (Array (Tuple5 Int Int Bits_256 Bits_256 Bits_256) (Maybe Bool)))
     (prf0 (Array (Tuple6 Int Int Int Bits_256 Bits_256 Bool) (Maybe Bits_256)))
     (ctr Int))
  Bool
  (let ((none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                          (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                          (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
    (let ((state (select state0 ctr)))
      (and (not (= state none))
           (let  ((U    (el11-1  (maybe-get state)))
                  (u    (el11-2  (maybe-get state)))
                  (V    (el11-3  (maybe-get state)))
                  (kid  (el11-4  (maybe-get state)))
                  (acc  (el11-5  (maybe-get state)))
                  (k    (el11-6  (maybe-get state)))
                  (ni   (el11-7  (maybe-get state)))
                  (nr   (el11-8  (maybe-get state)))
                  (kmac (el11-9  (maybe-get state)))
                  (sid  (el11-10 (maybe-get state)))
                  (mess (el11-11 (maybe-get state))))
             (and (not (= sid (as mk-none (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))))
                  (= (select revtested0 (maybe-get sid)) (as mk-none (Maybe Bool)))
                  (= (select revtesteval0 (mk-tuple5 kid (ite u V U) (ite u U V)
                                                     (maybe-get ni) (maybe-get nr)))
                     (as mk-none (Maybe Int)))
                  (= (select prf0 (mk-tuple6 kid (ite u V U) (ite u U V)
                                             (maybe-get ni) (maybe-get nr) true))
                     (as mk-none (Maybe Bits_256)))
                  ))))))


;; (define-fun <relation-lemma-debug-H7_1_0-H7_1_1-Test>
;;     ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
;;      (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
;;      (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
;;      (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
;;      (ctr Int))
;;   Bool
;;   (let ((state-H710 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-game-state> H710-return))
;;         (state-H711 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-game-state> H711-return))
;;         (retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-return-value-or-abort> H710-return))
;;         (retval1 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-return-value-or-abort> H711-return)))
;;     (let ((nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> state-H710))
;;           (nonces-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Nonces>  state-H711))
;;           (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H710))
;;           (game-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
;;           (game-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H711))
;;           (game-H711-old (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  H711-old))
;;           (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> state-H710))
;;           (prf-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
;;           (prf-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-PRF>  state-H711)))
;;       (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H710))
;;             (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H711))
;;             (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
;;             (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H711))
;;             (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
;;             (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710-old))
;;             (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H711))
;;             (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710))
;;             (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710-old))
;;             (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711))
;;             (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711-old))
;;             (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H710))
;;             (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H711))
;;             (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H710))
;;             (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H711))
;;             (Ltk0 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H710))
;;             (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H711))
;;             (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710))
;;             (Prf0-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710-old))
;;             (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H711))
;;             (H0 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H710))
;;             (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H711)))
;;         (and (= nonces-H710 nonces-H711)
;;              (= Ltk0 Ltk1)
;;              (= H0 H1)
;;              (= (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710)
;;                 (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
;;              (= ctr0 ctr1)
;;              (= State0 State1)
;;              (= RevTested0 RevTested1)
;;              ;;(= RevTestEval0 RevTestEval1)
;;              (= Fresh0 Fresh1)
             
;;              (= RevTestEval1 RevTestEval1-old)
;;              (let ((sid (maybe-get (el11-10 (maybe-get (select State0 ctr))))))
;;                (= (select RevTested0 sid) (mk-some true)))

;;              (prf-table-empty State0 RevTestEval0-old RevTested0-old Prf0-old ctr)

;;              ;;(revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
;;              (no-overwriting-prf prf-H710)
;;              (no-overwriting-game State0 ctr0)
;;              (sid-is-wellformed State0 Prf0)
;;              (sid-matches State0 Prf0)
;;              (own-nonce-is-unique State0 Nonces0)
;;              (revtesteval-populated RevTestEval0 H0 Prf0)
;;              (revtesteval-populated RevTestEval1 H1 Prf1)
;;              (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
;;              (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0)
;;              (mac-keys-equal-in-prf Prf0 Prf1)
;;              (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
;;              (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
;;              (stuff-not-initialized-early State0)
;;              )))))


(define-fun <relation-lemma-play-H7_1_0-H7_1_1-Send3>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3>)
     (ctr Int) (msg (Tuple2 Bits_256 Bits_256)))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send3-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H710))
          (game-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
          (game-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H711))
          (game-H711-old (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  H711-old))
          (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H711))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H711))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H711))
            (Ltk0 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
             (= Ltk0 Ltk1)
             (= H0 H1)
             (= (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710)
                (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
             (= ctr0 ctr1)
             (= State0 State1)
             (= RevTested0 RevTested1)
             (= Fresh0 Fresh1)
             (= Keys0 Keys1)
             (= Values0 Values1)

             (freshness-and-honesty-matches State0 Fresh0 H0)
             (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
             ;; (no-overwriting-prf prf-H710)
             (no-overwriting-game State0 ctr0)
             (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
             (sid-matches State0 Prf0)
             (own-nonce-is-unique State0 Nonces0)
             (revtesteval-populated RevTestEval0 H0 Prf0)
             (revtesteval-populated RevTestEval1 H1 Prf1)
             (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
             (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
             (mac-keys-equal-in-prf Prf0 Prf1)
             (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
             (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
             (stuff-not-initialized-early State0 Fresh0 Keys0)
             (mac-table-wellformed Keys0 Values0)


             )))))

















(define-fun <relation-lemma-play-H7_1_0-H7_1_1-Test>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (ctr Int))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H710))
          (game-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
          (game-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H711))
          (game-H711-old (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  H711-old))
          (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H711))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H711))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H711))
            (Ltk0 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
             (= Ltk0 Ltk1)
             (= H0 H1)
             (= (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710)
                (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
             (= ctr0 ctr1)
             (= State0 State1)
             (= RevTested0 RevTested1)
             (= Fresh0 Fresh1)
             (= Keys0 Keys1)
             (= Values0 Values1)

             (freshness-and-honesty-matches State0 Fresh0 H0)
             (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
             ;; (no-overwriting-prf prf-H710)
             (no-overwriting-game State0 ctr0)
             (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
             (sid-matches State0 Prf0)
             (own-nonce-is-unique State0 Nonces0)
             (revtesteval-populated RevTestEval0 H0 Prf0)
             (revtesteval-populated RevTestEval1 H1 Prf1)
             (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
             (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
             (mac-keys-equal-in-prf Prf0 Prf1)
             (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
             (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
             (stuff-not-initialized-early State0 Fresh0 Keys0)
             (mac-table-wellformed Keys0 Values0)


             )))))












(define-fun <relation-lemma-play-H7_1_0-H7_1_1-Reveal>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (ctr Int))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H710))
          (game-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
          (game-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H711))
          (game-H711-old (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  H711-old))
          (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H711))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H711))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H711))
            (kid0 (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710))
            (kid1 (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
            (Ltk0 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
             (= Ltk0 Ltk1)
             (= H0 H1)
             (= (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710)
                (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
             (= ctr0 ctr1)
             (= State0 State1)
             (= RevTested0 RevTested1)
             (= Fresh0 Fresh1)
             (= Keys0 Keys1)
             (= Values0 Values1)

             (freshness-and-honesty-matches State0 Fresh0 H0)
             (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)
             (no-overwriting-prf kid0 Prf0 H0 Keys0 Ltk0)
             (no-overwriting-game State0 ctr0)
             (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
             (sid-matches State0 Prf0)
             (own-nonce-is-unique State0 Nonces0)
             (revtesteval-populated RevTestEval0 H0 Prf0)
             (revtesteval-populated RevTestEval1 H1 Prf1)
             (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
             ;; (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
             (mac-keys-equal-in-prf Prf0 Prf1)
             (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
             (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
             (stuff-not-initialized-early State0 Fresh0 Keys0)
             (mac-table-wellformed Keys0 Values0)


             (forall ((kid Int)
                      (U Int)
                      (V Int)
                      (ni Bits_256)
                      (nr Bits_256))
                     (=> (not (= (select Prf0 (mk-tuple6 kid U V ni nr true))
                                 (as mk-none (Maybe Bits_256))))
                         (ite (= (select H0 kid) (mk-some true))
                              (not (is-mk-none (select Keys0 (mk-tuple5 kid U V ni nr))))
                              (not (is-mk-none (select Prf0 (mk-tuple6 kid U V ni nr false)))))))

             ;; output keys are only computed when revtesting
             (forall ((kid Int)
                      (U Int)
                      (V Int)
                      (ni Bits_256)
                      (nr Bits_256)
                      (kmac-prime Bits_256))
                     ;; entry in PRF table => entry in revtest
                     (=> (not (is-mk-none (select Prf0 (mk-tuple6 kid U V ni nr true))))
                         (let ((kmac (ite (= (select H0 kid) (mk-some true))
                                          (select Keys0 (mk-tuple5 kid U V ni nr))
                                          (select Prf0 (mk-tuple6 kid U V ni nr false)))))
                           (let ((tau (<<func-mac>> (maybe-get kmac) nr 2)))
                             (not (= (select RevTested0 (mk-tuple5 U V ni nr tau))
                                     (as mk-none (Maybe Bool))))))))
             

             (forall ((kid Int)
                      (U Int)
                      (V Int)
                      (ni Bits_256)
                      (nr Bits_256)
                      (kmac-prime Bits_256))            
                     ;; revtest none => prf none
                     (=> (let ((tau (<<func-mac>> kmac-prime nr 2)))
                           (= (select RevTested0 (mk-tuple5 U V ni nr tau))
                              (as mk-none (Maybe Bool))))
                         (=> (= (select Keys0 (mk-tuple5 kid U V ni nr))
                                (mk-some kmac-prime))
                             (= (select Prf0 (mk-tuple6 kid U V ni nr true))
                                (as mk-none (Maybe Bits_256))))))


             

             )))))





(define-fun <relation-lemma-play-H7_1_0-H7_1_1-NewKey>
    ((H710-old <GameState_H7_<$<!n!><!false!><!true!><!zeron!>$>>)
     (H711-old <GameState_H7_<$<!n!><!true!><!true!><!zeron!>$>>)
     (H710-return <OracleReturn-H7-<$<!n!><!false!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey>)
     (H711-return <OracleReturn-H7-<$<!n!><!true!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey>)
     (ltk (Maybe Bits_256)))
  Bool
  (let ((state-H710 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-game-state> H710-return))
        (state-H711 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-game-state> H711-return))
        (retval0 (<oracle-return-H7-<$<!n!><!false!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-return-value-or-abort> H710-return))
        (retval1 (<oracle-return-H7-<$<!n!><!true!><!true!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-return-value-or-abort> H711-return)))
    (let ((nonces-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Nonces> state-H710))
          (nonces-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Nonces>  state-H711))
          (mac-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-MAC> state-H710))
          (mac-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-MAC>  state-H711))
          (game-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H710))
          (game-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H710-old))
          (game-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H711))
          (game-H711-old (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-Game_noprfkey>  H711-old))
          (prf-H710 (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> state-H710))
          (prf-H710-old (<game-H7-<$<!n!><!false!><!true!><!zeron!>$>-pkgstate-PRF> H710-old))
          (prf-H711 (<game-H7-<$<!n!><!true!><!true!><!zeron!>$>-pkgstate-PRF>  state-H711)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H710))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H711))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H710))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H711))
            (First0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-First> game-H710))
            (First1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-First> game-H711))
            (Second0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Second> game-H710))
            (Second1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Second> game-H711))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H710-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H711))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H710-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H711-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H710))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H711))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H710))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H711))
            (Keys0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H710))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H711))
            (Values0 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H710))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H711))
            (kid0 (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H710))
            (kid1 (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H711))
            (Ltk0 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H710))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H711))
            (Prf0 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710))
            (Prf0-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H710-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H711))
            (H0 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H710))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H711)))
        (and (= nonces-H710 nonces-H711)
             (= Ltk0 Ltk1)
             (= H0 H1)
             (= kid0 kid1)
             (= ctr0 ctr1)
             (= State0 State1)
             (= RevTested0 RevTested1)
             (= Fresh0 Fresh1)
             (= Keys0 Keys1)
             (= Values0 Values1)
             (= Keys0 Keys1)
             (= Values0 Values1)
             (= First0 First1)
             (= Second0 Second1)



             (freshness-and-honesty-matches State0 Fresh0 H0)
             (revtesteval-matches-sometimes State0 RevTestEval0 RevTestEval1 RevTested0)

             (no-overwriting-prf kid0 Prf0 H0 Keys0 Ltk0)
             (no-overwriting-game State0 ctr0)
             (sid-is-wellformed State0 Prf0 Fresh0 Keys0)
             (sid-matches State0 Prf0)
             (own-nonce-is-unique State0 Nonces0)
             (revtesteval-populated RevTestEval0 H0 Prf0)
             (revtesteval-populated RevTestEval1 H1 Prf1)
           
             (prfeval-has-matching-session Prf0 RevTestEval0 RevTestEval1 RevTested0 State0 Fresh0 Keys0)
             (key-not-computed-unless-test-or-reveal State0 RevTested0 Prf0 H0 Keys0)
             (mac-keys-equal-in-prf Prf0 Prf1)
             (kmac-and-tau-are-computed-correctly State0 Prf0 H0 Ltk0 Fresh0 Keys0)
             (kmac-and-tau-are-computed-correctly State1 Prf1 H1 Ltk1 Fresh1 Keys1)
             (stuff-not-initialized-early State0 Fresh0 Keys0)
             (mac-table-wellformed Keys0 Values0)
             
             (no-ideal-values-for-dishonest-keys H0 Prf0 Keys0)
             (sessions-in-first-exist First0 State0)
             (sessions-in-first-exist Second0 State0)
             (honest-sid-have-tau-in-mac State0 Fresh0 Values0)


             ;; (honest-sessions-to-first-and-second State0 Fresh0 First0 Second0)

             
             )))))
