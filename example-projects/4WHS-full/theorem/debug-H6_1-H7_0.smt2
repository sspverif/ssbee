(define-fun <relation-lemma-debug-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (and (= (__sample-rand-H6_1-Bits_256 2 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (__sample-rand-H7_0-Bits_256 3 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old)))
       (= (__sample-rand-H6_1-Bits_256 1 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-1> H61-old))
          (__sample-rand-H7_0-Bits_256 2 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-2> H70-old)))))


(define-fun <relation-lemma-debug-H6_1-H7_0-Test>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Test>)
     (ctr Int))
  Bool
  (and (= (__sample-rand-H6_1-Bits_256 1 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-1> H61-old))
          (__sample-rand-H7_0-Bits_256 1 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-1> H70-old)))
       (= (__sample-rand-H6_1-Bits_256 3 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-3> H61-old))
          (__sample-rand-H7_0-Bits_256 4 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-4> H70-old)))))

(define-fun <relation-lemma-debug-H6_1-H7_0-Reveal>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (ctr Int))
  Bool
  (= (__sample-rand-H6_1-Bits_256 1 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-1> H61-old))
     (__sample-rand-H7_0-Bits_256 1 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-1> H70-old))))


(define-fun <relation-lemma-abort-left-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (let ((state (select State0-old ctr))
              (none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                                (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                                (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
          (and
           (=> (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
              (=> (not (= state none))
                  (let  ((U    (el11-1  (maybe-get state)))
                         (u    (el11-2  (maybe-get state)))
                         (V    (el11-3  (maybe-get state)))
                         (kid  (el11-4  (maybe-get state)))
                         (acc  (el11-5  (maybe-get state)))
                         (k    (el11-6  (maybe-get state)))
                         (ni   (el11-7  (maybe-get state)))
                         (nr   (el11-8  (maybe-get state)))
                         (kmac (el11-9  (maybe-get state)))
                         (sid  (el11-10 (maybe-get state)))
                         (mess (el11-11 (maybe-get state))))
                    (or (not (= u true))
                        (not (= mess 0))
                        (not (= acc (as mk-none (Maybe Bool))))
                        (let ((sampled-rand (__sample-rand-H6_1-Bits_256 2 nonce-ctr-61)))
                          (not (= (select Nonces0-old sampled-rand)
                                  (as mk-none (Maybe Bool)))))))))
           (=> (=> (not (= state none))
                   (let  ((U    (el11-1  (maybe-get state)))
                          (u    (el11-2  (maybe-get state)))
                          (V    (el11-3  (maybe-get state)))
                          (kid  (el11-4  (maybe-get state)))
                          (acc  (el11-5  (maybe-get state)))
                          (k    (el11-6  (maybe-get state)))
                          (ni   (el11-7  (maybe-get state)))
                          (nr   (el11-8  (maybe-get state)))
                          (kmac (el11-9  (maybe-get state)))
                          (sid  (el11-10 (maybe-get state)))
                          (mess (el11-11 (maybe-get state))))
                     (or (not (= u true))
                         (not (= mess 0))
                         (not (= acc (as mk-none (Maybe Bool))))
                         (let ((sampled-rand (__sample-rand-H6_1-Bits_256 2 nonce-ctr-61)))
                           (not (= (select Nonces0-old sampled-rand)
                                   (as mk-none (Maybe Bool))))))))
               (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))))


(define-fun <relation-lemma-abort-right-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (let ((state (select State1-old ctr))
              (none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                                (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                                (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
          (and
           (=> (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
              (=> (not (= state none))
                  (let  ((U    (el11-1  (maybe-get state)))
                         (u    (el11-2  (maybe-get state)))
                         (V    (el11-3  (maybe-get state)))
                         (kid  (el11-4  (maybe-get state)))
                         (acc  (el11-5  (maybe-get state)))
                         (k    (el11-6  (maybe-get state)))
                         (ni   (el11-7  (maybe-get state)))
                         (nr   (el11-8  (maybe-get state)))
                         (kmac (el11-9  (maybe-get state)))
                         (sid  (el11-10 (maybe-get state)))
                         (mess (el11-11 (maybe-get state))))
                    (or (not (= u true))
                        (not (= mess 0))
                        (not (= acc (as mk-none (Maybe Bool))))
                        (let ((sampled-rand (__sample-rand-H7_0-Bits_256 3 nonce-ctr-70)))
                          (not (= (select Nonces1-old sampled-rand)
                                  (as mk-none (Maybe Bool)))))))))
           (=> (=> (not (= state none))
                   (let  ((U    (el11-1  (maybe-get state)))
                          (u    (el11-2  (maybe-get state)))
                          (V    (el11-3  (maybe-get state)))
                          (kid  (el11-4  (maybe-get state)))
                          (acc  (el11-5  (maybe-get state)))
                          (k    (el11-6  (maybe-get state)))
                          (ni   (el11-7  (maybe-get state)))
                          (nr   (el11-8  (maybe-get state)))
                          (kmac (el11-9  (maybe-get state)))
                          (sid  (el11-10 (maybe-get state)))
                          (mess (el11-11 (maybe-get state))))
                     (or (not (= u true))
                         (not (= mess 0))
                         (not (= acc (as mk-none (Maybe Bool))))
                         (let ((sampled-rand (__sample-rand-H7_0-Bits_256 3 nonce-ctr-70)))
                           (not (= (select Nonces1-old sampled-rand)
                                   (as mk-none (Maybe Bool))))))))
               (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))))

               

(define-fun <relation-lemma-abort-right-implies-left-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (=> (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
            (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))


(define-fun <relation-lemma-abort-left-implies-right-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
        (=> (= retval0 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256))))
            (= retval1 (as mk-abort (ReturnValue (Tuple2 Bits_256 Bits_256)))))))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Play lemmata

(define-fun <relation-lemma-play-H6_1-H7_0-Send2>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2>)
     (ctr Int) (msg Bits_256))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send2-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70))
          (mac-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
      (and (= Nonces0 Nonces1)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= (<pkg-state-PRF-<$<!bprf!><!n!>$>-kid_> prf-H61)
              (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H70))
           (= ctr0 ctr1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)

           (state-equality State0 State1 Fresh1)
           (prf-equality Prf0 Prf1 Keys1)

           (freshness-and-honesty-matches State0 Fresh0 H0)
           (freshness-and-honesty-matches State1 Fresh1 H1)
           (stuff-not-initialized-early State0)
           ;(stuff-not-initialized-early State1)
           (kmac-sampled-consistently Prf0 Keys1)
           (prf-package-set-consistently Ltk0 H0 Prf0)
           (prf-package-set-consistently Ltk1 H1 Prf1)
           (all-sessions-have-valid-keys State0 Ltk0)
)))))


(define-fun <relation-lemma-play-H6_1-H7_0-NewKey>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-PRF-<$<!bprf!><!n!>$>-NewKey>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey>)
     (ltk (Maybe Bits_256)))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-PRF-<$<!bprf!><!n!>$>-NewKey-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-PRF-<$<!bprf!><!n!>$>-NewKey-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-PRF-<$<!true!><!n!>$>-NewKey-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70))
          (mac-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  state-H70)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70)))
      (and (= Nonces0 Nonces1)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= (<pkg-state-PRF-<$<!bprf!><!n!>$>-kid_> prf-H61)
              (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H70))
           (= ctr0 ctr1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)

           (state-equality State0 State1 Fresh1)
           ;(prf-equality Prf0 Prf1 Keys1)

           ;(freshness-and-honesty-matches State0 Fresh0 H0)
           (freshness-and-honesty-matches State1 Fresh1 H1)
           ;(stuff-not-initialized-early State0)
           ;(stuff-not-initialized-early State1)
           ;(kmac-sampled-consistently Prf0 Keys1)
           ;(prf-package-set-consistently Ltk0 H0 Prf0)
           ;(prf-package-set-consistently Ltk1 H1 Prf1)
           (all-sessions-have-valid-keys State0 Ltk0)
)))))




(define-fun <relation-lemma-play-old-H6_1-H7_0-Send4>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4>)
     (ctr Int) (msg (Tuple2 Bits_256 Bits_256)))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70))
          (prf-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  H70-old))
          (mac-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  state-H70))
          (mac-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  H70-old)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61-old))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Fresh1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70-old))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70))
            (H1-old (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Keys1-old (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70-old))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H70))
            )
      (and (= Nonces0 Nonces1)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= (<pkg-state-PRF-<$<!bprf!><!n!>$>-kid_> prf-H61)
              (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H70))
           (= ctr0 ctr1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)
           (= Fresh0-old Fresh1-old)

           ;(state-equality State0 State1 Fresh1)
           (prf-equality Prf0 Prf1 Keys1)

           ;; (not (= (select Fresh0 ctr)
           ;;          (as mk-none (Maybe Bool))))

           (= (is-mk-none (select State0-old ctr))
              (is-mk-none (select State1-old ctr)))
           
           (let ((state (select State0-old ctr)))
             (let  ((U    (el11-1  (maybe-get state)))
                    (u    (el11-2  (maybe-get state)))
                    (V    (el11-3  (maybe-get state)))
                    (kid  (el11-4  (maybe-get state)))
                    (acc  (el11-5  (maybe-get state)))
                    (k    (el11-6  (maybe-get state)))
                    (ni   (el11-7  (maybe-get state)))
                    (nr   (el11-8  (maybe-get state)))
                    (kmac (el11-9  (maybe-get state)))
                    (sid  (el11-10 (maybe-get state)))
                    (mess (el11-11 (maybe-get state))))
               (= (is-mk-abort retval0)
                  (or (is-mk-none state)
                      ;; (is-mk-none sid)
                      ;; (is-mk-none nr)
                      ;; (is-mk-none ni)
                      (= u false)
                      (not (= mess 1))
                      ;; (not (is-mk-none acc))
                      ;; (is-mk-none kmac)
                      ))))

           (let ((state (select State1-old ctr)))
             (=>
              (not (is-mk-none state))
              (let  ((U    (el11-1  (maybe-get state)))
                     (u    (el11-2  (maybe-get state)))
                     (V    (el11-3  (maybe-get state)))
                     (kid  (el11-4  (maybe-get state)))
                     (acc  (el11-5  (maybe-get state)))
                     (k    (el11-6  (maybe-get state)))
                     (ni   (el11-7  (maybe-get state)))
                     (nr   (el11-8  (maybe-get state)))
                     (kmac (el11-9  (maybe-get state)))
                     (sid  (el11-10 (maybe-get state)))
                     (mess (el11-11 (maybe-get state))))
                (and
                 (=> (is-mk-abort retval1)
                     (or ;; (is-mk-none state)
                         ;; (is-mk-none sid)
                         (= u false)
                         (is-mk-none nr)
                         (is-mk-none ni)
                         (not (= mess 1))
                         (is-mk-none (select H1-old kid))
                         ;; (not (is-mk-none acc))
                         ;; (is-mk-none (select Fresh1-old ctr))
                         ;; (= (select Fresh1-old ctr) (mk-some true))
                         ;; (and (= (select Fresh1-old ctr) (mk-some true))
                         (is-mk-none (select Keys1-old (mk-tuple5 kid V U (maybe-get ni) (maybe-get nr))))
                         (is-mk-none (select Keys1-old (mk-tuple5 kid U V (maybe-get ni) (maybe-get nr))))
                         ;; (and (= (select Fresh1-old ctr) (mk-some true))
                         ;;     (is-mk-none kmac))
                         ))))))
                 ;; (=> (or ;; (is-mk-none state)
                 ;;         ;; (is-mk-none sid)
                 ;;         (= u false)
                 ;;         ;; (is-mk-none nr)
                 ;;         ;; (is-mk-none ni)
                 ;;         (not (= mess 1))
                 ;;         ;; (not (is-mk-none acc))
                 ;;         ;; (ite (= (select Fresh1-old ctr) (mk-some true))
                 ;;         ;;      (is-mk-none (select Keys1 (mk-tuple5 kid V U (maybe-get ni) (maybe-get nr))))
                 ;;         ;;      (is-mk-none kmac))
                 ;;         )
                 ;;     (is-mk-abort retval1))
                 ;; ))))

           
           (let ((state (select State1-old ctr)))
             (=> (not (is-mk-none state))
                 (let  ((U    (el11-1  (maybe-get state)))
                        (u    (el11-2  (maybe-get state)))
                        (V    (el11-3  (maybe-get state)))
                        (kid  (el11-4  (maybe-get state)))
                        (acc  (el11-5  (maybe-get state)))
                        (k    (el11-6  (maybe-get state)))
                        (ni   (el11-7  (maybe-get state)))
                        (nr   (el11-8  (maybe-get state)))
                        (kmac (el11-9  (maybe-get state)))
                        (sid  (el11-10 (maybe-get state)))
                        (mess (el11-11 (maybe-get state))))
                   (=> (and (= mess 1) (= u true))
                       (and (not (= sid (as mk-none (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)))))
                            (= (select H1 kid) (select Fresh1 ctr))
                            (not (= nr (as mk-none (Maybe Bits_256))))
                            (not (= ni (as mk-none (Maybe Bits_256))))
                            ;;(not (= kmac (as mk-none (Maybe Bits_256))))
                            (ite (= (select Fresh1-old ctr) (mk-some true))
                                 (not (is-mk-none (select Keys1-old (mk-tuple5 kid V U (maybe-get ni) (maybe-get nr)))))
                                 (not (is-mk-none kmac)))
                            )))))
           
           ;(no-overwriting-prf prf-H61)
           
           ;(freshness-and-honesty-matches State0 Fresh0 H0)
           ;(freshness-and-honesty-matches State1 Fresh1 H1)
           ;(stuff-not-initialized-early State0)
           ;(kmac-sampled-consistently Prf0 Keys1)
           ;(prf-package-set-consistently Ltk0 H0 Prf0)
           ;(prf-package-set-consistently Ltk1 H1 Prf1)
           ;(all-sessions-have-valid-keys State0 Ltk0)

           )))))

(define-fun simple-state-equality
    ((State0 (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                        (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                        (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (State1 (Array Int (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                        (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                        (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int))))
     (Fresh1 (Array Int (Maybe Bool))))
  Bool
  (let ((none (as mk-none (Maybe (Tuple11 Int Bool Int Int (Maybe Bool) (Maybe Bits_256)
                                          (Maybe Bits_256) (Maybe Bits_256) (Maybe Bits_256)
                                          (Maybe (Tuple5 Int Int Bits_256 Bits_256 Bits_256)) Int)))))
    (forall ((ctr Int))
            (and
             (= (= (select State1 ctr) none)
                (= (select State0 ctr) none))
             (let ((state0 (select State0 ctr)))
               (=> (not (= state0 none))
                   (let  ((U    (el11-1  (maybe-get state0)))
                          (u    (el11-2  (maybe-get state0)))
                          (V    (el11-3  (maybe-get state0)))
                          (ltk  (el11-4  (maybe-get state0)))
                          (acc  (el11-5  (maybe-get state0)))
                          (k    (el11-6  (maybe-get state0)))
                          (ni   (el11-7  (maybe-get state0)))
                          (nr   (el11-8  (maybe-get state0)))
                          (kmac (el11-9  (maybe-get state0)))
                          (sid  (el11-10 (maybe-get state0)))
                          (mess (el11-11 (maybe-get state0))))
                     (ite (= (select Fresh1 ctr) (mk-some true))
                          (= (select State1 ctr)
                             (mk-some (mk-tuple11 U u V ltk acc k ni nr (as mk-none (Maybe Bits_256)) sid mess)))
                          (= (select State1 ctr) state0)))))))))


(define-fun <relation-lemma-play-H6_1-H7_0-Send4>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4>)
     (ctr Int) (msg (Tuple2 Bits_256 Bits_256)))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Send4-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70))
          (prf-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  H70-old))
          (mac-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  state-H70))
          (mac-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  H70-old)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61-old))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Fresh1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70-old))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70))
            (H1-old (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Keys1-old (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70-old))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H70))
            )
      (and (= Nonces0 Nonces1)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= (<pkg-state-PRF-<$<!bprf!><!n!>$>-kid_> prf-H61)
              (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H70))
           (= ctr0 ctr1)
           (= RevTested0 RevTested1)
           (= Fresh0 Fresh1)

           (simple-state-equality State0 State1 Fresh1)


           ;(prf-equality Prf0 Prf1 Keys1)

           ;(no-overwriting-prf prf-H61)
           
           ;(freshness-and-honesty-matches State0 Fresh0 H0)
           ;(freshness-and-honesty-matches State1 Fresh1 H1)
           ;(freshness-is-known State0 Fresh0)
           ;(freshness-is-known State1 Fresh1)
           ;(stuff-not-initialized-early State0)
           ;(other-stuff-not-initialized-early State1 Fresh1 Keys1)
           ;(kmac-sampled-consistently Prf0 Keys1)
           ;(kmac-consistent-in-state-and-mac State0 State1 Fresh1 Keys1)
           ;(prf-package-set-consistently Ltk0 H0 Prf0)
           ;(prf-package-set-consistently Ltk1 H1 Prf1)
           ;(all-sessions-have-valid-keys State0 Ltk0)




           )))))


(define-fun <relation-lemma-play-H6_1-H7_0-Reveal>
    ((H61-old <GameState_H6_<$<!n!><!b!><!true!><!zeron!>$>>)
     (H70-old <GameState_H7_<$<!n!><!b!><!false!><!zeron!>$>>)
     (H61-return <OracleReturn-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (H70-return <OracleReturn-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal>)
     (ctr Int))
  Bool
  (let ((state-H61 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-game-state> H61-return))
        (state-H70 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-game-state> H70-return))
        (retval0 (<oracle-return-H6-<$<!n!><!b!><!true!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-return-value-or-abort> H61-return))
        (retval1 (<oracle-return-H7-<$<!n!><!b!><!false!><!zeron!>$>-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Reveal-return-value-or-abort> H70-return)))
    (let ((nonce-ctr-61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-2> H61-old))
          (nonce-ctr-70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-3> H70-old))
          (nonces-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> state-H61))
          (nonces-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Nonces> H61-old))
          (nonces-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  state-H70))
          (nonces-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Nonces>  H70-old))
          (game-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> state-H61))
          (game-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-Game_noprfkey> H61-old))
          (game-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  state-H70))
          (game-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-Game_noprfkey>  H70-old))
          (prf-H61 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> state-H61))
          (prf-H61-old (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-pkgstate-PRF> H61-old))
          (prf-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  state-H70))
          (prf-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-PRF>  H70-old))
          (mac-H70 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  state-H70))
          (mac-H70-old (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-pkgstate-MAC>  H70-old)))
      (let ((ctr0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H61))
            (ctr1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-ctr_> game-H70))
            (State0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61))
            (State0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H61-old))
            (State1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70))
            (State1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-State> game-H70-old))
            (RevTested0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61))
            (RevTested0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H61-old))
            (RevTested1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTested> game-H70))
            (RevTestEval0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61))
            (RevTestEval0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H61-old))
            (RevTestEval1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70))
            (RevTestEval1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-RevTestEval> game-H70-old))
            (Fresh0 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61))
            (Fresh0-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H61-old))
            (Fresh1 (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70))
            (Fresh1-old (<pkg-state-Game_noprfkey-<$<!b!><!n!><!zeron!>$>-Fresh> game-H70-old))
            (Nonces0 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61))
            (Nonces0-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H61-old))
            (Nonces1 (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70))
            (Nonces1-old (<pkg-state-Nonces-<$<!true!><!n!>$>-Nonces> nonces-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Ltk0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-LTK> prf-H61))
            (Ltk1 (<pkg-state-PRF-<$<!true!><!n!>$>-LTK> prf-H70))
            (Prf0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61))
            (Prf0-old (<pkg-state-PRF-<$<!bprf!><!n!>$>-PRF> prf-H61-old))
            (Prf1 (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70))
            (Prf1-old (<pkg-state-PRF-<$<!true!><!n!>$>-PRF> prf-H70-old))
            (H0 (<pkg-state-PRF-<$<!bprf!><!n!>$>-H> prf-H61))
            (H1 (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70))
            (H1-old (<pkg-state-PRF-<$<!true!><!n!>$>-H> prf-H70-old))
            (Keys1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70))
            (Keys1-old (<pkg-state-MAC-<$<!bmac!><!n!>$>-Keys> mac-H70-old))
            (Values1 (<pkg-state-MAC-<$<!bmac!><!n!>$>-Values> mac-H70))
            )
      (and (= Nonces0 Nonces1)
           (= Ltk0 Ltk1)
           (= H0 H1)
           (= (<pkg-state-PRF-<$<!bprf!><!n!>$>-kid_> prf-H61)
              (<pkg-state-PRF-<$<!true!><!n!>$>-kid_> prf-H70))
           (= ctr0 ctr1)
           (= RevTested0 RevTested1)
           (= RevTestEval0 RevTestEval1)
           (= Fresh0 Fresh1)

           (state-equality State0 State1 Fresh1)

           (= (is-mk-none (select State0-old ctr))
              (is-mk-none (select State1-old ctr)))
           
           (= (el11-10 (maybe-get (select State0-old ctr)))
              (el11-10 (maybe-get (select State1-old ctr))))
           
           (prf-equality Prf0-old Prf1-old Keys1)
           (and (= (__sample-rand-H6_1-Bits_256 1 (<game-H6-<$<!n!><!b!><!true!><!zeron!>$>-rand-1> H61-old))
                   (__sample-rand-H7_0-Bits_256 1 (<game-H7-<$<!n!><!b!><!false!><!zeron!>$>-rand-1> H70-old))))
           ;;(prf-equality Prf0 Prf1 Keys1)

           ;; (no-overwriting-prf prf-H61)
           
           ;; (freshness-and-honesty-matches State0 Fresh0 H0)
           ;; (freshness-and-honesty-matches State1 Fresh1 H1)
           ;; (freshness-is-known State0 Fresh0)
           ;; (freshness-is-known State1 Fresh1)
           ;; (stuff-not-initialized-early State0)
           ;; (other-stuff-not-initialized-early State1 Fresh1 Keys1)
           ;; (kmac-sampled-consistently Prf0 Keys1)
           ;; (kmac-consistent-in-state-and-mac State0 State1 Fresh1 Keys1)
           ;; (prf-package-set-consistently Ltk0 H0 Prf0)
           ;; (prf-package-set-consistently Ltk1 H1 Prf1)
           ;; (all-sessions-have-valid-keys State0 Ltk0)
           ;; (revtesteval-populated RevTestEval0 H0 Prf0)
           ;; (revtesteval-populated RevTestEval1 H1 Prf1)
           ;; (sid-is-wellformed State0 Prf0)

           )))))
