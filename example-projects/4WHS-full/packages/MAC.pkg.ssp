package MAC {
    /*
     * Handle: (kid,U,V,ni,nr)
     */
    params {
        n: Integer,
        mac: fn Bits(256), Bits(256), Integer -> Bits(256),
        b: Bool,
    }

    state {
        Keys: Table((Integer, Integer,Integer,Bits(256),Bits(256)),Bits(256)),
        Values: Table(((Integer, Integer,Integer,Bits(256),Bits(256)),
                       (Bits(256), Integer)), Bits(256)),
    }

    oracle Init(handle: (Integer, Integer,Integer,Bits(256),Bits(256))) {
        if (Keys[handle] == None) {
            key <-$ Bits(256);
            Keys[handle] <- Some(key);
		}
    }

    oracle Mac(handle: (Integer, Integer,Integer,Bits(256),Bits(256)),
               value: (Bits(256), Integer))
           -> Bits(256) {
        key <- Keys[handle];
        assert not (key == None);

        (val1, val2) <- parse value;
        tag <- mac(Unwrap(key), val1, val2);

        Values[(handle, value)] <- Some(tag);
        return tag;
    }

    oracle Verify(handle: (Integer, Integer,Integer,Bits(256),Bits(256)),
                  value: (Bits(256), Integer),
                  tag: Bits(256))
           -> Bool {
        key <- Keys[handle];
        assert not (key == None);

        if b {
            entry <- Values[(handle, value)];
            if (entry == None) {
                return false;
            }
            if (Unwrap(entry) != tag) {
                return false;
            }
            return true;
		} else {
            (val1, val2) <- parse value;
            tag_ <- mac(Unwrap(key), val1, val2);

            return (tag == tag_);
        }
    }
}
