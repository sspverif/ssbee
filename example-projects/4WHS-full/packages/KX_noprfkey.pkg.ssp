package KX_noprfkey {
    params {
        b: Bool,
        n: Integer,
        zeron: Bits(256),
        prf: fn Bits(256), Integer, Integer, Bits(256), Bits(256), Bool ->  Bits(256),
        mac: fn Bits(256), Bits(256), Integer -> Bits(256),
    }
    
    state {
          /* H:     Table(Integer, Bool),*/          /* administrative kid, honesty */
          ctr_:  Integer,                       /* administrative sid  */
          /* kid_:  Integer, */                      /* administrative kid  */
		  /* session key table, reveal -> (.,false) ; test -> (.,true) */
          RevTested:  Table((Integer,Integer,Bits(256),Bits(256),Bits(256)),
		               Bool),
		  Fresh: Table(Integer, Bool),
		  RevTestEval: Table((Integer,Integer,Integer,Bits(256),Bits(256)),Integer),
          /* Authentication */
          First:  Table((Integer,Integer,Bits(256),Bits(256),Bits(256)), Integer),
          Second: Table((Integer,Integer,Bits(256),Bits(256),Bits(256)), Integer),
          State: Table(Integer,
                  /*    administrative sid  */
                (
                 Integer,
                  /*    ID of owner of the session */
                 Bool,
                  /*    false: initiator, 
                        true : responder,*/ 
                 Integer,
                  /* Intended Peer */
                 Integer,
                  /*    kid          */
                 Maybe(Bool),
                  /* None: running, 
                        true: accepted, 
                        false: rejected   */
                 Maybe(Bits(256)),
                        /* session key */
                 Maybe(Bits(256)),
                        /* initiator nonce */
                 Maybe(Bits(256)),
                        /* responder nonce */
                 Maybe(Bits(256)),
                        /* MAC key */
                 Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        /* SID */
                 Integer))
                        /* nbr of messages sent */

          }

    import oracles {
	     Hon(h: Integer) -> Bool,
		 Eval(h: Integer, a: Integer, aa: Integer, c: Bits(256), d: Bits(256), e: Bool) -> Bits(256),
         Run1(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer))                            
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256))), 
         Run2(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), ni: Bits(256))               
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256),Bits(256))), 
         Run3(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), msg: (Bits(256), Bits(256))) 
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256),Bits(256))), 
         Run4(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), msg: (Bits(256), Bits(256))) 
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bits(256))), 
         Run5(state: (Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer), tau: Bits(256))              
         -> ((Integer,Bool,Integer,Integer,Maybe(Bool),
                        Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),Maybe(Bits(256)),
                        Maybe((Integer,Integer,Bits(256),Bits(256),Bits(256))),
                        Integer),
            (Bool)),
    }



oracle NewSession(U: Integer, u: Bool, V: Integer, kid: Integer) -> Integer {
        ctr_        <- (ctr_ + 1) ; 
        State[ctr_] <- Some((U,u,V,kid,None,None,None,None,None,None,0));
		hon         <- invoke Hon(kid);
		Fresh[ctr_] <- Some(hon);
        return ctr_;
    }

oracle Send1(ctr: Integer) -> (Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state <- Unwrap(State[ctr]);
        return      <- invoke Run1(state);
        (state,msg) <- parse return;
        State[ctr]  <- Some(state);
        return msg;
    } 

oracle Send2(ctr: Integer, msg: Bits(256)) -> (Bits(256),Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state   <- Unwrap(State[ctr]);
        return         <- invoke Run2(state,msg);
        (state,msg_)   <- parse return;
        State[ctr]     <-  Some(state);
        return msg_;
    } 

oracle Send3(ctr: Integer, msg: (Bits(256),Bits(256))) -> (Bits(256), Bits(256))
    {
        assert not (State[ctr] == None);    /* session has been initialized */
        state                                           <- Unwrap(State[ctr]);
        return         <- invoke Run3(state,msg);
        (state,msg_)   <- parse return;

		(_U,_u,_V,_kid,_acc,_k,_ni,_nr,_kmac,sid,_mess) <- parse state;
        if (_mess == 2){
		if (First[Unwrap(sid)] == None) {
		    First[Unwrap(sid)] <- Some(ctr);
		} else {
		  if (Second[Unwrap(sid)] == None) {
		      Second[Unwrap(sid)] <- Some(ctr);
		  }
		}
        }

        State[ctr]     <-  Some(state);
        return msg_;
    } 

oracle Send4(ctr: Integer, msg: (Bits(256),Bits(256))) -> (Bits(256))
    {
        assert not (State[ctr] == None);     /* session has been initialized */
        state                                          <- Unwrap(State[ctr]);

        return       <- invoke Run4(state,msg);
        (state,msg_) <- parse return;
        State[ctr]   <- Some(state);

		(_U,_u,_V,_kid,_acc,_k,_ni,_nr,_kmac,sid,_mess) <- parse state;
		if (First[Unwrap(sid)] == None) {
		    First[Unwrap(sid)] <- Some(ctr);
		} else {
		  if (Second[Unwrap(sid)] == None) {
		      Second[Unwrap(sid)] <- Some(ctr);
		  }
		}

        return msg_;  
    } 

oracle Send5(ctr: Integer, msg: Bits(256)) -> (Bool)
    {
        assert not (State[ctr] == None);    /* session has been initialized */
        state                                       <- Unwrap(State[ctr]);
		
        return      <- invoke Run5(state,msg);
        (state,stop) <- parse return;
        State[ctr] <- Some(state);
        return stop;
    } 

oracle Reveal(ctr: Integer) -> Bits(256)
    {
    (U,u,V,kid,acc,_k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);

	/* Session accepted */
    assert (acc == Some(true));

	/* only allowed to test/reveal sid once */
    assert (RevTested[Unwrap(sid)] == None);

	/* mark key as revealed */
    RevTested[Unwrap(sid)] <- Some(false);    

	  RevTestEval[(kid,U,V,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
      k <- invoke Eval(kid,U,V,Unwrap(ni),Unwrap(nr),true);
    return k;
    }

oracle Test(ctr: Integer) -> Bits(256)
    {
    (U,u,V,kid,acc,_k,ni,nr,kmac,sid,mess) <- parse Unwrap(State[ctr]);
	
	/* Session accepted */
    assert (acc == Some(true));
    assert Unwrap(Fresh[ctr]);

	/* only allowed to test/reveal sid once */
    assert (RevTested[Unwrap(sid)] == None);

	/* mark key as tested */
    RevTested[Unwrap(sid)] <- Some(true);

    if b {
	  k <-$ Bits(256);
	} else {
	     RevTestEval[(kid,U,V,Unwrap(ni),Unwrap(nr))] <- Some(ctr);
         k <- invoke Eval(kid,U,V,Unwrap(ni),Unwrap(nr) ,true);
    }
    return k;
    }

oracle SameKey(ctr1: Integer, ctr2: Integer) -> Bool {
    (_U,_u,_V,_kid,acc1,k1,_ni,_nr,_kmac,sid1,_mess) <- parse Unwrap(State[ctr1]);
    (_U,_u,_V,_kid,acc2,k2,_ni,_nr,_kmac,sid2,_mess) <- parse Unwrap(State[ctr2]);

	return false;
	}

oracle AtMost(ctr1: Integer, ctr2: Integer, ctr3: Integer) -> Bool {
    (_U,_u,_V,_kid,acc1,_k,_ni,_nr,_kmac,sid1,_mess) <- parse Unwrap(State[ctr1]);
    (_U,_u,_V,_kid,acc2,_k,_ni,_nr,_kmac,sid2,_mess) <- parse Unwrap(State[ctr2]);
    (_U,_u,_V,_kid,acc3,_k,_ni,_nr,_kmac,sid3,_mess) <- parse Unwrap(State[ctr3]);

	return false;
	}

oracle AtLeast(sid: (Integer,Integer,Bits(256),Bits(256),Bits(256))) -> Bool {

   if ((b == false) and (First[sid] != None as Integer)
                    and (Second[sid] == None)){
      (_U,_u,_V,_kid,acc1,_k,_ni,_nr,_kmac,_sid,_mess) <- parse Unwrap(State[Unwrap(First[sid])]);
	  if ((acc1 == Some(true)) and (Fresh[Unwrap(First[sid])] == Some(true))) {
          return true;
	  }
   }
   return false;
   }

    }